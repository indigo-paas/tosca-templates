tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://github.com/indigo-paas/tosca-types/raw/main/tosca_types/applications/c-scale_openeo.yaml

description: Deploy the OpenEO platform on top of a kubernetes cluster

metadata:
  display_name: OpenEO platform
  template_type: "kubernetes"

topology_template:

  inputs:

    admin_token:
      description: password token for accessing k8s dashboard and grafana dashboard
      type: string
      required: yes

    number_of_masters:
      description: number of VMs for K8s master
      type: integer
      required: no
      default: 1
      constraints:
        - valid_values: [ 1 ]

    frontend_dns_name:
      description: DNS name for the main k8s endpoints (api server, dashboard, monitoring)
      type: string
      required: yes

    dyn_dns_service_token:
      description: Copy here the secret generated by the Dynamic DNS service
      type: string
      required: yes

    certificate_issuer:
      description: Select an issuer for the endpoints SSL certificate
      type: string
      constraints:
        - valid_values: [ self-signed, letsencrypt-staging, letsencrypt-prod ]
      default: letsencrypt-staging

    admin_email:
      description: Specify the email address for receiving notifications
      type: string
      default: ''

    num_cpus_master:
      description: number of CPU for K8s master VM
      type: integer
      default: 4

    mem_size_master:
      description: memory size for K8s master VM
      type: string
      default: "8 GB"

    number_of_nodes:
      description: number of K8s node VMs
      type: integer
      default: 3

    num_cpus_node:
      description: number of CPUs for K8s node VM
      type: integer
      default: 4

    mem_size_node:
      description: memory size for K8s node VM
      type: scalar-unit.size
      default: 8 GB

    layer_catalog_url:
      description: URL of the catalog file to import
      type: string
      default: https://raw.githubusercontent.com/Open-EO/openeo-geotrellis-kubernetes/master/docker/cscale_layercatalog.json

    spark_driver_memory:
      description: Amount of memory to use for the driver process
      type: string
      default: 2g

    spark_driver_cores:
      type: integer
      description: Number of cores to use for the driver process
      default: 1

    spark_executor_memory:
      type: string      
      description: Amount of memory to use per executor process     
      default: 2g
    
    spark_executor_cores:
      type: integer
      description: The number of cores to use on each executor
      default: 1

    ports:
      description:
      type: map
      required: false
      default: { "http": { "protocol": "tcp", "source": 80 }, "https": { "protocol": "tcp", "source": 443 }}
      constraints:
        - min_length: 0
      entry_schema:
        type: tosca.datatypes.indigo.network.PortSpec
      description: Ports to open on the K8s master VM

    ubuntu_version:
      type: version      
      default: 20.04
      description: Ubuntu Operating System distribution version

  node_templates:

    pub_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    server_pub_port:
      type: tosca.nodes.indigo.network.Port
      properties:
        order: 1
        dns_name: { concat: [ 'dydns:', get_input: dyn_dns_service_token, '@', get_input: frontend_dns_name  ] }
      requirements:
        - binding: k8s_master_server
        - link: pub_network

    priv_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: private

    server_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: k8s_master_server
        - link: priv_network

    node_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: k8s_node_server
        - link: priv_network


    k8s_master:
      type: tosca.nodes.DODAS.FrontEnd.Kubernetes
      properties:
        kube_version: 1.23.8
        admin_token: { get_input: admin_token }
        kube_master_dns_name: { get_input: frontend_dns_name }
        cert_manager_type: { get_input: certificate_issuer }
        cert_manager_email: { get_input: admin_email }
      requirements:
        - host: k8s_master_server

    k8s_node:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes
      properties:
        kube_version: 1.23.8
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
      requirements:
        - host: k8s_node_server

    k8s_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            ports: { get_input: ports }
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master }
        os:
          properties:
            distribution: ubuntu
            version: { get_input: ubuntu_version }

    k8s_node_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: number_of_nodes }
        host:
          properties:
            #instance_type:  m1.large
            num_cpus: { get_input: num_cpus_node }
            mem_size: { get_input: mem_size_node }
        os:
          properties:
            distribution: ubuntu
            version: { get_input: ubuntu_version }

    openeo_platform:
      type: tosca.nodes.indigo.OpenEO
      properties:
        dns_name: { get_input: frontend_dns_name }
        cert_manager_issuer: { concat: [ get_input: certificate_issuer, '-issuer' ] }
        layercatalog_url: { get_input: layer_catalog_url } 
        spark_driver_memory: { get_input: spark_driver_memory }
        spark_driver_cpus: { get_input: spark_driver_cores }
        spark_executor_memory: { get_input: spark_executor_memory }
        spark_executor_cpus: { get_input: spark_executor_cores }
      requirements:
        - host: k8s_master_server
        - dependency: k8s_master


  outputs:
    openeo_endpoint:
      value: { concat: [ 'https://' , get_property: [ k8s_master, kube_master_dns_name], '/openeo/1.1.0/' ]}              
    k8s_endpoint:
      value: { concat: [ 'https://', get_attribute: [ k8s_master_server, public_address, 0 ],  ':6443' ] }
    k8s_dashboard_endpoint:
      value: { concat: ['https://' , get_property: [ k8s_master, kube_master_dns_name], '/dashboard/']}
    grafana_endpoint:
      value: { concat: ['https://' , get_property: [ k8s_master, kube_master_dns_name], '/grafana']}
    grafana_username:
      value: admin
    k8s_master_ip:
      value: { get_attribute: [ k8s_master_server, public_address, 0 ] }
    k8s_master_node_creds:
      value: { get_attribute: [ k8s_master_server, endpoint, credential, 0 ] }
    k8s_wn_ip:
      value: { get_attribute: [ k8s_node_server, private_address ] }
    k8s_wn_node_creds:
      value: { get_attribute: [ k8s_node_server, endpoint, credential ] }
